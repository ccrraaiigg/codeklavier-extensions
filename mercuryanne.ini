[midi]
# midi options of the device to use
port: 2

#IAC driver loopback:
#noteon_id: 144

#M-audio midi controller:
#noteon_id: 152
#noteoff_id: 128
#pedal_id: 184
#pedal_midi_sostenuto: 7

#Yamaha Clavinova:
noteon_id: 144
noteoff_id: 128
pedal_id: 176
pedal_midi_sostenuto: 66

#Casio keyboard:
#pedal_midi_sostenuto: 67


[Hello World]
# simple alphanumeric & commands 1-1 mapping used Hello World module
# midinumber  :  alphanumeric or command mapping

# Basic keywords used in Mercury for different instruments and settings
# global settings
22: a
25: b
27: c
30: d
32: e
34: f
37: g
39: h
42: i
44: j
46: k
49: l
51: m
54: n
56: o
58: p
61: r
63: s
66: t
68: u
70: v
73: w
75: y
78: z
80: _
82: space
85: 0
87: 1
90: 2
92: 3
94: 4
95: backspace
97: 5
99: 6
102: 7
104: 8
106: 9
108: down
toggle: 107

[shortcuts]
# first key that remains pressed, second key
eval: alt, enter
eval_manual: alt, enter
jump_start: alt, up
jump_end: alt, down
jump_start_line: alt, left
jump_end_line: alt, right
delete_line: alt, x
copy_line: alt, c
insert_paste_line: alt, v
paste_replace_line: alt, p
arrow_left: left
arrow_right: right

# alternative shortkeys to execute code in Mercury
# eval: alt, enter
# eval: cmd, enter

[shortcuts mapping]
# Optional: map the shortcuts to snippets defined in the sections below to replace default evaluation
eval_manual:eval_manual
delete_line: delete_line
jump_start: jump_start
jump_end: jump_end
jump_start_line: jump_start_line
jump_end_line: jump_end_line
copy_line: copy_line
insert_paste_line: insert_paste_line
paste_replace_line: paste_replace_line
arrow_left: arrow_left
arrow_right: arrow_right


[Motippets]
# simple alphanumeric & commands 1-1 mapping used in Motippets module and evaluation shortcut
66: motippetssc-evaluate

[Motippets register division]
# midi note register limits (21 <= mid_low is low register, between mid_low and mid_hi is mid register, > mid_hi is hi)
mid_low: 49
mid_hi: 78

[chordal main motifs midi]
motif_1: 59, 62, 66, 60, 64, 67, 62, 69, 66
set_tempo: 70, 51, 62, 60, 44, 63, 66, 62, 55, 49

[melodic main motifs midi]
motif_3: 45, 47, 48, 49

[chordal conditional motifs midi]
conditional_1: 36, 31, 29, 26, 28, 35, 38, 33, 24, 26, 31, 28, 33, 21, 23, 29

[melodic conditional motifs midi]
conditional_2: 49, 45, 48, 49, 43
conditional_3: 97, 93, 96, 97, 91

[chordal conditional results motifs midi]
conditional_result_1: 21,22,23
conditional_result_2: 23,24,25

[melodic conditional results motifs midi]
conditional_result_3: 68,74,74,63,69
conditional_result_4: 99, 92, 90, 89, 92, 94
conditional_result_5: 26,23,23

[melodic mini motifs]
mini_motif_1: 61, 62, 63
delete_line: 60, 61
eval_manual: 60, 62
jump_start: 60, 63
jump_end: 60, 64
jump_start_line: 60, 65
jump_end_line: 60, 66
copy_line: 60, 67
insert_paste_line: 60, 68
paste_replace_line: 60, 69
mini_motif_9: 62, 65, 66
arrow_left: 60, 59, 58
arrow_right: 60, 59, 57
mini_set_tempo: 26, 32, 35, 38
add_bass: 60, 70
add_kick: 60, 71
add_reverb: 60, 72

[chordal mini motifs]
set:
scale:
hipass:
lopass:
new synth:
new sample:
ring:
name:
palindrome:
#clone:
#join:
reverse:
rotate:
killAll:

# Basic code layout
# new sample <name> time(<division>) name(<name>)
# new sample <- one block? easy re-use
# new sample kick_909 group(drums) time(1/16) beat(kickBeat)
#
# ring kickBeat [1 0 0 1] <- declare ring manually
#
# ring kickBeat euclid(16 5 1) <- declare ring procedurally
# ring kickBeat2 random(16 2) <- declare ring procedurally
# ring kickBeat join(kickBeat kickBeat2) <- concatenate 2 rings
#
# new synth <- one block? quickly make synth
# new synth saw shape(5 100 5) time(1/16) fx(filter low 900 0.5)
# new synth saw shape(<a> <s> <r>) time(<var>) fx(filter low <var> <var>)
# new synth saw shape(5 100 5) time(1/16) name(bass)
#
# set bass fx(reverb) wave2(square 1.2) group(allsynths) <- set parameters
# set allsynths fx(lfo) <- set named group
# set all fx(reverb) wave2(square 1.2) <- set all instruments

[snippets code output]
# motif_name : code output
# (in this case supercollider)
# (duplicate names won't work!)
set_tempo: /set tempo
set: set
scale: scale
hipass: hipass
lopass: lopass
new synth: new synth
new sample:
ring:
name:
palindrome:
#clone:
#join:
reverse:
rotate:
killAll:

# some ideas for code-snippets
add_bass: new synth saw name(bass) time(1/16) shape(1 500) fx(filter)
add_kick: new sample kick_909
add_reverb: set bass fx(reverb 0.9 11)

mini_set_tempo: /set tempo mini
mini_motif_3: ~map_amplitude = true;  Ndef(\piano_fx).map(\amp, Ndef(\krm1_a)); ~tremoloL1amp;
mini_motif_4: Ndef(\piano_fx).map(\dec, Ndef(\krm1_d)); ~tremoloH1
mini_motif_5: Ndef(\acc).map(\fx, Ndef(\krm2_3)); ~tremoloH2;
mini_motif_6: ~map_amp_ost = true; ~tremoloM1;
mini_motif_7: Ndef(\acc).map(\note, Ndef(\krm2_1)); ~tremoloM2;
mini_motif_8: ~map_amp_org = true; ~tremoloM3;
mini_motif_9: "say -v juan belly mamacita".unixCmd;



#conditionals
conditional_1: setting up a conditional: IF number of \nnotes played is more than 100 in...
conditional_2: setting up an ONGOING conditional: \nIF range is more than...
conditional_3: setting up an ONGOING conditional: \nIF range is less than...

# motif name : code, flag [osc | reset | gomb], [osc address | motif_name to reset], optional flag [grab_value | a value], optional flag [random1 | random2]
conditional_result_1_comment: if true -> stop ~snippet2, if false -> nothing
conditional_result_1_true: ~snippet2.stop;, reset, motif_2
conditional_result_1_false: //nothing

conditional_result_2_comment: if true -> stop ~snippet1, if false -> nothing
conditional_result_2_true: ~snippet1.stop(20);, reset, motif_1
conditional_result_2_false: //nothing

conditional_result_3_comment: if true -> play gong sound!, if false -> play gong sound!
conditional_result_3_true: ~gong.play, osc, gong, grab_value, random2
conditional_result_3_false: ~gong.play, osc, gong, grab_value, random2

conditional_result_4_comment: Activate self-destruct mechanism
conditional_result_4_true: ~stop.all;, gomb
conditional_result_4_false: //nothing

conditional_result_5_comment: if true -> if true -> play huygens sample, if false -> play huygens sample
conditional_result_5_true: ~huygens.stuk(), osc, huygens, grab_value, random1
conditional_result_5_false: ~huygens.stuk(), osc, huygens, grab_value, random1

[snippets code output callback]
# motif_name : code output
# (code to be evaluated after the normal code output, for example: for unmapping)
# (duplicate names won't work!)
mini_motif_1:
mini_set_tempo: callback mini
mini_motif_3: ~map_amplitude = false; \amp, Ndef(\piano_fx).set(\amp, ~tremoloL1amp.linlin(1, 16, 0.01, 1));
mini_motif_4: [\pulse, \pulse2, \pulse3, \pulse4, \pulse5, \pulse6].do{|i| Ndef(i).set(\fx, ~tremoloH1.linlin(1, 16, 1, 88));}
mini_motif_5: Ndef(\acc).set(\fx, ~tremoloH2.linlin(1, 16, 0, 15));
mini_motif_6: ~map_amp_ost = false;
mini_motif_7: Ndef(\acc).set(\note, ~tremoloM2.linlin(1, 16, 180, 800));
mini_motif_8: ~map_amp_org = false;
mini_motif_9: {1.wait; "say -v vi hello handsome".unixCmd}.fork;

[motif counter]
playlimit: 1

[snippets for tremolos]
mini_motif_1:
mini_set_tempo: set tempo
mini_motif_3: ~tremoloL1amp =
mini_motif_4: ~tremoloH1 =
mini_motif_5: ~tremoloH2 =
mini_motif_6: ~tremoloM1 =
mini_motif_7: ~tremoloM2 =
mini_motif_8: ~tremoloM3 =

[conditionals settings]
#name : type [note_count, range_more_than, range_less_than], [perpetual (true | false): 1 | 0], optional settings [totalnotes, ]
conditional_1: note_count, 0, 100
conditional_2: range_more_than, 1
conditional_3: range_less_than, 1
# make volume,

[motippets display settings]
#motif_name : display column id
motif_1: 1
motif_2: 2
mini_motif_1: 1
mini_set_tempo: 2
mini_motif_3: 1
mini_motif_4: 1
mini_motif_5: 2
mini_motif_6: 5
mini_motif_7: 2
mini_motif_8: 5
mini_motif_9: 1

[motippets random limits]
# name : bottom limit, upper limits.
random: 10, 45
random1: 1, 80
random2: -2, 10
#NOTE: random2 multiplies by a value extracted from the function where it is used

[ckalculator]
shift: off
wrong_note_tolerance: 1

[lambda]
# lambda function : midi number mapped to the function
evaluate_function: 59
identity_midi: 23
select_first_midi: 0
select_second_midi: 0
successor_midi: 83, 95
predecessor_midi: 0
add_midi: 107
subtract_midi: 71
mult_midi: 0
division_midi: 0
greater_than_midi: 47
equality_midi: 35
less_than_midi: 0

[articulation]
# articulation name : threshold in seconds
chord: 0.02
staccato: 0.35
sostenuto: 0.8
