# ======================================================
# mercury.ini
#
# Mercury extension for CodeKlavier
# ======================================================

# ======================================================
# Midi Setup

[midi]
# midi options of the device to use
port: 2

# IAC driver loopback:
# noteon_id: 144

# M-audio midi controller:
# noteon_id: 152
# noteoff_id: 128
# pedal_id: 184
# pedal_midi_sostenuto: 7

# Yamaha Clavinova:
noteon_id: 144
noteoff_id: 128
pedal_id: 176
pedal_midi_sostenuto: 66

# Casio keyboard:
# pedal_midi_sostenuto: 67

# ======================================================
# Mapping Mode 1-1

[Hello World]
# Just play a single note, not using.
# Could be useful to type in single numbers and non-alphanumeric characters

# simple alphanumeric & commands 1-1 mapping used Hello World module
# midinumber  :  alphanumeric or command mapping

# Basic keywords used in Mercury for different instruments and settings
# global settings
22: volume #in floatingpoint amplitude => 'set volume 0.9'
23: tempo #in bpm => 'set bpm 93'
25: scale #scalename and root => 'set scale minor Ab'
32: hipass #cutoff in Hz => 'set hipass 900'
33: lopass #cutoff in Hz => 'set lopass 900'
# start line with any of these 3 commands
39: new #make a synth or sample
42: set #change settings or methods for named-instruments
44: ring #create/transform lists for melody/rhythm etc.
# when line starts with 'new' -> choose instrument type
49: synth
50: sample
# when line starts with 'ring <aVarName>' -> choose generator
51: spreadInclusive() #spreadInclusive(5 0 12) => [0 3 6 9 12]
52: spread() #spread(5 0 12) => [0 2 4 7 9]
53: fill() #fill(10 2 20 3 30 1) => [10 10 20 20 20 30]
# these need a ring as first argument, because they transfrom
# eg. when 1 line up = 'ring myRing [1 2 3]'
54: palindrome() #palindrome(myRing) => [1 2 3 3 2 1]
56: clone() #clone(myRing 0 12 24) => [1 2 3 13 14 15 25 26 27]
57: join() #join(myRing myRing) => [1 2 3 1 2 3]
58: reverse() #reverse(myRing) => [3 2 1]
59: rotate() #rotate(myRing 1) => [2 3 1]
# when line starts with 'new synth' -> select waveshape
60: saw
61: square
62: triangle
63: sine
# when line starts with 'new sample' -> select sample
64: kick_909_dist
65: snare_dnb
66: hat_min
67: hat_min_open
68: kick_sub
70: clap_min
# use any of these methods on both sample/synth
71: gain() #volume of the synth/sample
73: time() #triggering speed (1/4, 1/8, 1/16, 1/12, 1=1bar etc.)
86: beat() #play-or-not-to-play (1 = play all times, 0.5 = 50% of the time)
88: shape() #envelope in ms, attack, decay
89: name() #name of the instrument to reference to with 'set'
# use this method on synth only
90: note() #the pitch where (0 0) = 36 (C2), (0 1) > 48, (7 0) > 43
# this method with any of the following keyword as argument for fx
91: fx()
92: reverb #fx(reverb 0.9 11) => 0.9=amplitude 11=length (0-20)
93: delay #fx(delay 5/16 3/16 0.8) => pingpong-delay 5/16=delaytimeL/R 0.8=feedback
95: double #fx(double) => Automated-Double-Tracking effect
96: drive #fx(drive 10) => soft-clipping overdrive 10=distort amount (0 - inf)
97: filter #fx(filter low 1000 0.8) => low=type (band/high/low), 1000=cutoff in Hz, 0.8 = resonance
98: lfo #fx(lfo 1/8) => Low frequency oscillator, 1/8=lfo speed in bar-division
# kill all the sound
105: killAll
108: down

# Toggles modes: 1-1 mapping OR motivic mapping
toggle: 107

# ======================================================
# Shortcuts
# 	first key that remains pressed, second key

[shortcuts]
#eval: alt, enter
eval:
delete_line: alt, x
eval_manual: alt, enter
jump_start: alt, up
jump_end: alt, down
jump_start_line: alt, left
jump_end_line: alt, right
copy_line: alt, c
insert_paste_line: alt, v
paste_replace_line: alt, p

arrow_up: up
arrow_down: down
arrow_left: left
arrow_right: right

# Optional: map the shortcuts to snippets defined in the
# sections below to replace default evaluation
[shortcuts mapping]
delete_line: delete_line
eval_manual: eval_manual
jump_start: jump_start
jump_end: jump_end
jump_start_line: jump_start_line
jump_end_line: jump_end_line
copy_line: copy_line
insert_paste_line: insert_paste_line
paste_replace_line: paste_replace_line

arrow_up: arrow_up
arrow_down: arrow_down
arrow_left: arrow_left
arrow_right: arrow_right

# simple alphanumeric & commands 1-1 mapping used in
# Motippets module and evaluation shortcut
[Motippets]
66: motippetssc-evaluate

# midi note register limits (21 <= mid_low is low register,
# between mid_low and mid_hi is mid register, > mid_hi is hi)
[Motippets register division]
mid_low: 99
mid_hi: 100

# can only call this once !!!
[chordal main motifs midi]
# motif_1: 59, 62, 66, 60, 64, 67, 62, 69, 66
#set_tempo: 70, 51, 62, 60, 44, 63, 66, 62, 55, 49

# Global Settings
set_scale: 22, 23
set_tempo: 22, 24
# Bell soundscape
new_bell: 22, 25
# Kick heartbeat-ish
kick_beat: 22, 26
new_kick: 22, 27
# Tone arpy
tone_mel1: 22, 28
new_tone: 22, 29
# Sawtooth bass pulse
new_bass: 22, 30
# Off-beat hihat
new_hat: 22, 31

# can only call this once !!!
[melodic main motifs midi]
# motif_3: 45, 47, 48, 49

# ======================================================
# Conditional Motifs !!! IGNORE FOR NOW !!!

[chordal conditional motifs midi]
conditional_1: 36, 31, 29, 26, 28, 35, 38, 33, 24, 26, 31, 28, 33, 21, 23, 29

[melodic conditional motifs midi]
conditional_2: 49, 45, 48, 49, 43
conditional_3: 97, 93, 96, 97, 91

[chordal conditional results motifs midi]
conditional_result_1: 21,22,23
conditional_result_2: 23,24,25

[melodic conditional results motifs midi]
conditional_result_3: 68,74,74,63,69
conditional_result_4: 99, 92, 90, 89, 92, 94
conditional_result_5: 26,23,23

# ======================================================
# Melodic Motifs
# > Anne sets motifs

[melodic mini motifs]
delete_line: 60, 61
eval_manual: 60, 62
jump_start: 60, 63
jump_end: 60, 64
jump_start_line: 60, 65
jump_end_line: 60, 66
copy_line: 60, 67
insert_paste_line: 60, 68
paste_replace_line: 60, 69
nine: 60, 70
mini_set_tempo: 60, 74
# Bell soundscape
set_bell_verb: 48, 49
set_bell_dly: 48, 50
set_bell_spd: 48, 51
set_bell_lfo: 48, 52
set_bell_gain: 48, 53
# Kick heartbeat-ish
kick_beat2: 48, 54
# Tone arpy
set_tone_dly: 48, 55
set_tone_shp: 48, 56
tone_mel2: 48, 57
# Sawtooth bass pulse
set_bass_wave: 48, 58
set_bass_lfo:	48, 59
# Off-beat hihat

[chordal mini motifs]
arrow_up: 72, 73
arrow_down: 72, 74
arrow_left: 60, 59, 58
arrow_right: 60, 61, 62

# ======================================================
# Code Snippets
# > The output of the corresponding motif (unique names)

[snippets code output]
# corresponding code snippet with same name as in motifs

# Parameters that need to be changed with the scales
# time(), gain(), fx(delay <one-param>),
# fx(delayTime), fx(delayFb), speed()

# Global Settings
set_scale: set scale minor_harmonic c
set_tempo: set tempo 115
mini_set_tempo: / set tempo
# Bell soundscape
new_bell: new sample bowl_hi name(bell) time(7) gain(1.5) speed(0.25) fx(reverb 1.5 5)
set_bell_verb: set bell fx(reverb 1.5 18)
set_bell_dly: set bell fx(delay 1/2 2/3 0.9)
set_bell_spd: set bell speed(-1)
set_bell_lfo: set bell fx(lfo 1/3 down)
set_bell_gain: set bell gain(0)

# Kick heartbeat-ish
kick_beat: ring kickBeat hex(90000000)
new_kick: new sample kick_909 time(1/16) beat(kickBeat 2)
kick_beat2: ring kickBeat hex(8890)

# Tone arpy
tone_mel1: ring melody sine(20 1 0 12)
new_tone: new synth sine name(tone) note(melody 2) time(1 1/16) shape(200 1)
set_tone_dly: set tone fx(delay 1/16 3/16 0.95)
set_tone_shp: set tone shape(1 90) time(7/16 1/16)
tone_mel2: ring melody sine(20 11.2 0 24)

# Sawtooth bass pulse
new_bass: new synth saw name(bass) shape(-1) time(2) fx(filter low 3 1400 90 0.4 0.5 0.1)
set_bass_wave: set bass wave2(square 0.4993)
set_bass_lfo: set bass fx(lfo 1/4 up)

# Off-beat hihat
new_hat: new sample hat_min time(1/4 1/8) gain(0.2) pan(random)


#conditionals
conditional_1: setting up a conditional: IF number of \nnotes played is more than 100 in...
conditional_2: setting up an ONGOING conditional: \nIF range is more than...
conditional_3: setting up an ONGOING conditional: \nIF range is less than...

# motif name : code, flag [osc | reset | gomb], [osc address | motif_name to reset], optional flag [grab_value | a value], optional flag [random1 | random2]
conditional_result_1_comment: if true -> stop ~snippet2, if false -> nothing
conditional_result_1_true: ~snippet2.stop;, reset, motif_2
conditional_result_1_false: //nothing

conditional_result_2_comment: if true -> stop ~snippet1, if false -> nothing
conditional_result_2_true: ~snippet1.stop(20);, reset, motif_1
conditional_result_2_false: //nothing

conditional_result_3_comment: if true -> play gong sound!, if false -> play gong sound!
conditional_result_3_true: ~gong.play, osc, gong, grab_value, random2
conditional_result_3_false: ~gong.play, osc, gong, grab_value, random2

conditional_result_4_comment: Activate self-destruct mechanism
conditional_result_4_true: ~stop.all;, gomb
conditional_result_4_false: //nothing

conditional_result_5_comment: if true -> if true -> play huygens sample, if false -> play huygens sample
conditional_result_5_true: ~huygens.stuk(), osc, huygens, grab_value, random1
conditional_result_5_false: ~huygens.stuk(), osc, huygens, grab_value, random1

[snippets code output callback]
# motif_name : code output
# (code to be evaluated after the normal code output, for example: for unmapping)
# (duplicate names won't work!)
mini_set_tempo: callback mini

[snippets for tremolos]
# 3 values (also whitespace) separated by commas are allowed: the code expression to print, a prefix on the tremolo value, a suffix for the value.
# there should be minumum 1 value.
# example:
# myvar = ,( , )
# will result in myvar = ( 3 )
mini_set_tempo: set tempo,(,)

[conditionals settings]
#name : type [note_count, range_more_than, range_less_than], [perpetual (true | false): 1 | 0], optional settings [totalnotes, ]
conditional_1: note_count, 0, 100
conditional_2: range_more_than, 1
conditional_3: range_less_than, 1
# make volume,

[motippets display settings]
#motif_name : display column id
mini_set_tempo: 2

[motippets random limits]
# name : bottom limit, upper limits.
random: 10, 45
random1: 1, 80
random2: -2, 10
#NOTE: random2 multiplies by a value extracted from the function where it is used

[ckalculator]
shift: off
wrong_note_tolerance: 1

[lambda]
# lambda function : midi number mapped to the function
evaluate_function: 59
identity_midi: 23
select_first_midi: 0
select_second_midi: 0
successor_midi: 83, 95
predecessor_midi: 0
add_midi: 107
subtract_midi: 71
mult_midi: 0
division_midi: 0
greater_than_midi: 47
equality_midi: 35
less_than_midi: 0

[articulation]
# articulation name : threshold in seconds
chord: 0.02
staccato: 0.35
sostenuto: 0.8
